program        → declaration* EOF ;
declaration    > funDecl | varDecl | statement ;
funDecl        > "fun" function ;
function       > IDENTIFIER "(" parameters? ")" block ;
parameters     > IDENTIFIER ( "," IDENTIFIER )* ;
varDecl        > "var" IDENTIFIER ( "=" expression )? ( "," IDENTIFIER ( "=" expression )? )* ";" ;
statement      → ifStmt 
               | whileStmt 
               | forStmt
               | exprStmt 
               | printStmt 
               | block 
               | breakStmt
               | continueStmt 
               | returnStmt;
ifStmt         > "if" "(" expression ")" statement ( "else" statement )? ;
whileStmt      > "while" "(" expression ")" statement ;
forStmt        > "for" "(" ( varDecl | exprStmt | ";" ) expression? ";" expression? ")" statement ; 
exprStmt       → expression ";" ;
printStmt      → "print" expression ";" ;
block          > "{" declaration "}" ;
breakStmt      > "break" ";" ;
continueStmt   > "continue" ";" ;
returnStmt     > "return" expression? ";" ;

expression     → ternery ;
ternery        > assignment ( "?" expression ":" expression )? ;
assignment     > IDENTIFIER "=" assignment | logic_or ;
logic_or       > logic_and ( "or" logic_and )* ;
logic_and       > equality ( "and" equality )* ;
equality       → comparison ( ( "!=" | "==" ) comparison )* ;
comparison     → term ( ( ">" | ">=" | "<" | "<=" ) term )* ;
term           → factor ( ( "-" | "+" ) factor )* ;
factor         → unary ( ( "/" | "*" ) unary )* ;
unary          → ( "!" | "-" ) unary | call
call           > primary ( "(" arguments? ")" )* ;
arguments      > expression ( "," expression )* ;
primary        → NUMBER | STRING 
               | "true" | "false" | "nil"
               | "(" expression ")"
               | IDENTIFIER ;

